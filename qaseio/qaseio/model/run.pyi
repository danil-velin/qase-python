# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@qase.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qaseio import schemas  # noqa: F401


class Run(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            title = schemas.StrSchema
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            status = schemas.IntSchema
            status_text = schemas.StrSchema
            
            
            class start_time(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'start_time':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class end_time(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'end_time':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            public = schemas.BoolSchema
            
            
            class stats(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        total = schemas.IntSchema
                        untested = schemas.IntSchema
                        passed = schemas.IntSchema
                        failed = schemas.IntSchema
                        blocked = schemas.IntSchema
                        skipped = schemas.IntSchema
                        retest = schemas.IntSchema
                        in_progress = schemas.IntSchema
                        invalid = schemas.IntSchema
                        __annotations__ = {
                            "total": total,
                            "untested": untested,
                            "passed": passed,
                            "failed": failed,
                            "blocked": blocked,
                            "skipped": skipped,
                            "retest": retest,
                            "in_progress": in_progress,
                            "invalid": invalid,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["untested"]) -> MetaOapg.properties.untested: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["passed"]) -> MetaOapg.properties.passed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["failed"]) -> MetaOapg.properties.failed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["blocked"]) -> MetaOapg.properties.blocked: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["skipped"]) -> MetaOapg.properties.skipped: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["retest"]) -> MetaOapg.properties.retest: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["in_progress"]) -> MetaOapg.properties.in_progress: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["invalid"]) -> MetaOapg.properties.invalid: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", "untested", "passed", "failed", "blocked", "skipped", "retest", "in_progress", "invalid", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["untested"]) -> typing.Union[MetaOapg.properties.untested, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["passed"]) -> typing.Union[MetaOapg.properties.passed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["failed"]) -> typing.Union[MetaOapg.properties.failed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["blocked"]) -> typing.Union[MetaOapg.properties.blocked, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["skipped"]) -> typing.Union[MetaOapg.properties.skipped, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["retest"]) -> typing.Union[MetaOapg.properties.retest, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["in_progress"]) -> typing.Union[MetaOapg.properties.in_progress, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["invalid"]) -> typing.Union[MetaOapg.properties.invalid, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", "untested", "passed", "failed", "blocked", "skipped", "retest", "in_progress", "invalid", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    untested: typing.Union[MetaOapg.properties.untested, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    passed: typing.Union[MetaOapg.properties.passed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    failed: typing.Union[MetaOapg.properties.failed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    blocked: typing.Union[MetaOapg.properties.blocked, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    skipped: typing.Union[MetaOapg.properties.skipped, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    retest: typing.Union[MetaOapg.properties.retest, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    in_progress: typing.Union[MetaOapg.properties.in_progress, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    invalid: typing.Union[MetaOapg.properties.invalid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'stats':
                    return super().__new__(
                        cls,
                        *_args,
                        total=total,
                        untested=untested,
                        passed=passed,
                        failed=failed,
                        blocked=blocked,
                        skipped=skipped,
                        retest=retest,
                        in_progress=in_progress,
                        invalid=invalid,
                        _configuration=_configuration,
                        **kwargs,
                    )
            time_spent = schemas.Int64Schema
            
            
            class environment(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        title = schemas.StrSchema
                        description = schemas.StrSchema
                        slug = schemas.StrSchema
                        host = schemas.StrSchema
                        __annotations__ = {
                            "title": title,
                            "description": description,
                            "slug": slug,
                            "host": host,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["host"]) -> MetaOapg.properties.host: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "slug", "host", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["host"]) -> typing.Union[MetaOapg.properties.host, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "slug", "host", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                    description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                    slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
                    host: typing.Union[MetaOapg.properties.host, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'environment':
                    return super().__new__(
                        cls,
                        *_args,
                        title=title,
                        description=description,
                        slug=slug,
                        host=host,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class milestone(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        title = schemas.StrSchema
                        description = schemas.StrSchema
                        __annotations__ = {
                            "title": title,
                            "description": description,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                    description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'milestone':
                    return super().__new__(
                        cls,
                        *_args,
                        title=title,
                        description=description,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class custom_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomFieldValue']:
                        return CustomFieldValue
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CustomFieldValue'], typing.List['CustomFieldValue']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_fields':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomFieldValue':
                    return super().__getitem__(i)
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TagValue']:
                        return TagValue
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TagValue'], typing.List['TagValue']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TagValue':
                    return super().__getitem__(i)
            
            
            class cases(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cases':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "title": title,
                "description": description,
                "status": status,
                "status_text": status_text,
                "start_time": start_time,
                "end_time": end_time,
                "public": public,
                "stats": stats,
                "time_spent": time_spent,
                "environment": environment,
                "milestone": milestone,
                "custom_fields": custom_fields,
                "tags": tags,
                "cases": cases,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_text"]) -> MetaOapg.properties.status_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stats"]) -> MetaOapg.properties.stats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_spent"]) -> MetaOapg.properties.time_spent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["milestone"]) -> MetaOapg.properties.milestone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cases"]) -> MetaOapg.properties.cases: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "title", "description", "status", "status_text", "start_time", "end_time", "public", "stats", "time_spent", "environment", "milestone", "custom_fields", "tags", "cases", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_text"]) -> typing.Union[MetaOapg.properties.status_text, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public"]) -> typing.Union[MetaOapg.properties.public, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> typing.Union[MetaOapg.properties.stats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_spent"]) -> typing.Union[MetaOapg.properties.time_spent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> typing.Union[MetaOapg.properties.environment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["milestone"]) -> typing.Union[MetaOapg.properties.milestone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> typing.Union[MetaOapg.properties.custom_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cases"]) -> typing.Union[MetaOapg.properties.cases, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "title", "description", "status", "status_text", "start_time", "end_time", "public", "stats", "time_spent", "environment", "milestone", "custom_fields", "tags", "cases", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status_text: typing.Union[MetaOapg.properties.status_text, str, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, None, str, datetime, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, None, str, datetime, schemas.Unset] = schemas.unset,
        public: typing.Union[MetaOapg.properties.public, bool, schemas.Unset] = schemas.unset,
        stats: typing.Union[MetaOapg.properties.stats, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        time_spent: typing.Union[MetaOapg.properties.time_spent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        environment: typing.Union[MetaOapg.properties.environment, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        milestone: typing.Union[MetaOapg.properties.milestone, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        custom_fields: typing.Union[MetaOapg.properties.custom_fields, list, tuple, schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        cases: typing.Union[MetaOapg.properties.cases, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Run':
        return super().__new__(
            cls,
            *_args,
            id=id,
            title=title,
            description=description,
            status=status,
            status_text=status_text,
            start_time=start_time,
            end_time=end_time,
            public=public,
            stats=stats,
            time_spent=time_spent,
            environment=environment,
            milestone=milestone,
            custom_fields=custom_fields,
            tags=tags,
            cases=cases,
            _configuration=_configuration,
            **kwargs,
        )

from qaseio.model.custom_field_value import CustomFieldValue
from qaseio.model.tag_value import TagValue
