# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@qase.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qaseio import schemas  # noqa: F401


class CustomFieldCreate(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "title",
            "type",
            "entity",
        }
        
        class properties:
            
            
            class title(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class entity(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 2
                    inclusive_minimum = 0
            
            
            class type(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 9
                    inclusive_minimum = 0
            
            
            class value(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.Int64Schema
                                
                                
                                class title(
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        max_length = 255
                                __annotations__ = {
                                    "id": id,
                                    "title": title,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "title", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "title", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                id=id,
                                title=title,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'value':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class placeholder(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'placeholder':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class default_value(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'default_value':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            is_filterable = schemas.BoolSchema
            is_visible = schemas.BoolSchema
            is_required = schemas.BoolSchema
            is_enabled_for_all_projects = schemas.BoolSchema
            
            
            class projects_codes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projects_codes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "title": title,
                "entity": entity,
                "type": type,
                "value": value,
                "placeholder": placeholder,
                "default_value": default_value,
                "is_filterable": is_filterable,
                "is_visible": is_visible,
                "is_required": is_required,
                "is_enabled_for_all_projects": is_enabled_for_all_projects,
                "projects_codes": projects_codes,
            }
    
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    entity: MetaOapg.properties.entity
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placeholder"]) -> MetaOapg.properties.placeholder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_value"]) -> MetaOapg.properties.default_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_filterable"]) -> MetaOapg.properties.is_filterable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_visible"]) -> MetaOapg.properties.is_visible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_required"]) -> MetaOapg.properties.is_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_enabled_for_all_projects"]) -> MetaOapg.properties.is_enabled_for_all_projects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projects_codes"]) -> MetaOapg.properties.projects_codes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "entity", "type", "value", "placeholder", "default_value", "is_filterable", "is_visible", "is_required", "is_enabled_for_all_projects", "projects_codes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entity"]) -> MetaOapg.properties.entity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placeholder"]) -> typing.Union[MetaOapg.properties.placeholder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_value"]) -> typing.Union[MetaOapg.properties.default_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_filterable"]) -> typing.Union[MetaOapg.properties.is_filterable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_visible"]) -> typing.Union[MetaOapg.properties.is_visible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_required"]) -> typing.Union[MetaOapg.properties.is_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_enabled_for_all_projects"]) -> typing.Union[MetaOapg.properties.is_enabled_for_all_projects, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projects_codes"]) -> typing.Union[MetaOapg.properties.projects_codes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "entity", "type", "value", "placeholder", "default_value", "is_filterable", "is_visible", "is_required", "is_enabled_for_all_projects", "projects_codes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, ],
        entity: typing.Union[MetaOapg.properties.entity, decimal.Decimal, int, ],
        value: typing.Union[MetaOapg.properties.value, list, tuple, None, schemas.Unset] = schemas.unset,
        placeholder: typing.Union[MetaOapg.properties.placeholder, None, str, schemas.Unset] = schemas.unset,
        default_value: typing.Union[MetaOapg.properties.default_value, None, str, schemas.Unset] = schemas.unset,
        is_filterable: typing.Union[MetaOapg.properties.is_filterable, bool, schemas.Unset] = schemas.unset,
        is_visible: typing.Union[MetaOapg.properties.is_visible, bool, schemas.Unset] = schemas.unset,
        is_required: typing.Union[MetaOapg.properties.is_required, bool, schemas.Unset] = schemas.unset,
        is_enabled_for_all_projects: typing.Union[MetaOapg.properties.is_enabled_for_all_projects, bool, schemas.Unset] = schemas.unset,
        projects_codes: typing.Union[MetaOapg.properties.projects_codes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomFieldCreate':
        return super().__new__(
            cls,
            *_args,
            title=title,
            type=type,
            entity=entity,
            value=value,
            placeholder=placeholder,
            default_value=default_value,
            is_filterable=is_filterable,
            is_visible=is_visible,
            is_required=is_required,
            is_enabled_for_all_projects=is_enabled_for_all_projects,
            projects_codes=projects_codes,
            _configuration=_configuration,
            **kwargs,
        )
