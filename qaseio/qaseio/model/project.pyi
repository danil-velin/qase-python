# coding: utf-8

"""
    Qase.io API

    Qase API Specification.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@qase.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qaseio import schemas  # noqa: F401


class Project(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            code = schemas.StrSchema
            
            
            class counts(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        cases = schemas.IntSchema
                        suites = schemas.IntSchema
                        milestones = schemas.IntSchema
                        
                        
                        class runs(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    total = schemas.IntSchema
                                    active = schemas.IntSchema
                                    __annotations__ = {
                                        "total": total,
                                        "active": active,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", "active", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", "active", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                active: typing.Union[MetaOapg.properties.active, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'runs':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    total=total,
                                    active=active,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class defects(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    total = schemas.IntSchema
                                    open = schemas.IntSchema
                                    __annotations__ = {
                                        "total": total,
                                        "open": open,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["open"]) -> MetaOapg.properties.open: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["total", "open", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["open"]) -> typing.Union[MetaOapg.properties.open, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total", "open", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                open: typing.Union[MetaOapg.properties.open, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'defects':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    total=total,
                                    open=open,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "cases": cases,
                            "suites": suites,
                            "milestones": milestones,
                            "runs": runs,
                            "defects": defects,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cases"]) -> MetaOapg.properties.cases: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suites"]) -> MetaOapg.properties.suites: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["milestones"]) -> MetaOapg.properties.milestones: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["runs"]) -> MetaOapg.properties.runs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["defects"]) -> MetaOapg.properties.defects: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["cases", "suites", "milestones", "runs", "defects", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cases"]) -> typing.Union[MetaOapg.properties.cases, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suites"]) -> typing.Union[MetaOapg.properties.suites, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["milestones"]) -> typing.Union[MetaOapg.properties.milestones, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["runs"]) -> typing.Union[MetaOapg.properties.runs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["defects"]) -> typing.Union[MetaOapg.properties.defects, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cases", "suites", "milestones", "runs", "defects", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    cases: typing.Union[MetaOapg.properties.cases, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    suites: typing.Union[MetaOapg.properties.suites, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    milestones: typing.Union[MetaOapg.properties.milestones, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    runs: typing.Union[MetaOapg.properties.runs, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    defects: typing.Union[MetaOapg.properties.defects, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'counts':
                    return super().__new__(
                        cls,
                        *_args,
                        cases=cases,
                        suites=suites,
                        milestones=milestones,
                        runs=runs,
                        defects=defects,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "title": title,
                "code": code,
                "counts": counts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["counts"]) -> MetaOapg.properties.counts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "code", "counts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["counts"]) -> typing.Union[MetaOapg.properties.counts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "code", "counts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        counts: typing.Union[MetaOapg.properties.counts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Project':
        return super().__new__(
            cls,
            *_args,
            title=title,
            code=code,
            counts=counts,
            _configuration=_configuration,
            **kwargs,
        )
